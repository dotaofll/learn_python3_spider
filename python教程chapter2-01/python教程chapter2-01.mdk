Title         : 编码风格&变量类型&命名规范
Author        : xxlucas
Logo          : True

[TITLE]


# 指令和程序

## 计算机的组成
计算机的硬件系统通常由五大部件构成，包括：运算器、控制器、存储器、输入设备和输出设备。
其中，运算器和控制器放在一起就是我们通常所说的中央处理器，
它的功能是执行各种运算和控制指令以及处理计算机软件中的数据。
我们通常所说的程序实际上就是指令的集合，
我们程序就是将一系列的指令按照某种方式组织到一起，
然后通过这些指令去控制计算机做我们想让它做的事情。

## 二进制的由来

提出一个问题，我们常用的十进制的计数方式是怎么来的呢？(低头看手，数一数总共有几根手指)
正确的答案就是我们只有十根手指头，所以从一数到十，手指头就不够用了，必须进位。
今天我们大多数时候使用的计算机，虽然它们的元器件做工越来越精密，处理能力越来越强大，但究其本质来说仍然属于“冯·诺依曼结构”的计算机。
“冯·诺依曼结构”有两个关键点，一是指出要将存储设备与中央处理器分开，二是提出了将数据以二进制方式编码。
二进制是一种“逢二进一”的计数法，跟我们人类使用的“逢十进一”的计数法没有实质性的区别，人类因为有十根手指所以使用了十进制。
对于计算机来说，二进制在物理器件上来说是最容易实现的（高电压表示1，低电压表示0），
于是在“冯·诺依曼结构”的计算机都使用了二进制。
虽然我们并不需要每个程序员都能够使用二进制的思维方式来工作，
但是了解二进制以及它与我们生活中的十进制之间的转换关系，
以及二进制与八进制和十六进制的转换关系还是有必要的。

# Python编码风格

Python是一种计算机编程语言。
计算机编程语言和我们日常使用的自然语言有所不同，最大的区别就是，
自然语言在不同的语境下有不同的理解，
而计算机要根据编程语言执行任务，就必须保证编程语言写出的程序决不能有歧义，
所以，任何一种编程语言都有自己的一套语法，
编译器或者解释器就是负责把符合语法的程序代码转换成CPU能够执行的机器码，然后执行。Python也不例外

## 编码风格

Python的语法比较简单，采用缩进方式，写出来的代码就像下面的样子：

``` python
b = 60
if b == 0:
    print(u"b 等于零")
elif b % 2 == 0:
    print(u"b 为偶数")
else:
    print(u"b 为奇数")
```


以#开头的语句是注释，注释是给人看的，可以是任意内容，解释器会忽略掉注释。
其他每一行都是一个语句，当语句以冒号:结尾时，缩进的语句视为代码块。

缩进有利有弊。好处是强迫你写出格式化的代码，
但没有规定缩进是几个空格还是Tab。
按照约定俗成的惯例，应该始终坚持使用4个空格的缩进。

缩进的另一个好处是强迫你写出缩进较少的代码，
你会倾向于把一段很长的代码拆分成若干函数，从而得到缩进较少的代码。

缩进的坏处就是“复制－粘贴”功能失效了，这是最难以忍受的地方。
当你重构代码时，粘贴过去的代码必须重新检查缩进是否正确
。此外，IDE很难像格式化C代码那样格式化Python代码。

最后，请务必注意，Python程序是大小写敏感的，如果写错了大小写，程序会报错

## 变量和类型

在程序设计中，变量是指一个包含部分已知或未知数值或信息的载体。
计算机中的变量是实际存在的数据或者说是存储器中存储数据的一块内存空间，
变量的值可以被读取和修改，这是所有计算和控制的基础。
计算机能处理的数据有很多种类型，
除了数值之外还可以处理文本、图形、音频、视频等各种各样的数据，
那么不同的数据就需要定义不同的存储类型。
Python中的数据类型很多，而且也允许我们自定义新的数据类型（这一点在后面会讲到），
我们先介绍几种常用的数据类型。


* 整型：Python中的整数具有无限精度，也就是说Python可以处理任意整数。
（Python 2.x中有int和long两种类型的整数，但这种区分对Python来说意义不大
，因此在Python 3.x中整数只有int这一种了），
而且支持二进制（如0b100，换算成十进制是4）、
八进制（如0o100，换算成十进制是64）
、十进制（100）和十六进制（0x100，换算成十进制是256）的表示法

* 浮点型：浮点数也就是小数，之所以称为浮点数，是因为按照科学记数法表示时，一个浮点数的小数点位置是可变的，浮点数除了数学写法（如123.456）之外还支持科学计数法（如1.23456e2）。
* 字符串型：字符串是以单引号或双引号括起来的任意文本，比如'hello'和"hello",字符串还有原始字符串表示法、字节字符串表示法、Unicode字符串表示法，而且可以书写成多行的形式（用三个单引号或三个双引号开头，三个单引号或三个双引号结尾）.
* 布尔型：布尔值只有True、False两种值，要么是True，要么是False，在Python中，可以直接用True、False表示布尔值（请注意大小写），也可以通过布尔运算计算出来（例如3 < 5会产生布尔值True，而2 == 1会产生布尔值False）。
* 复数型：形如3+5j，跟数学上的复数表示一样，唯一不同的是虚部的i换成了j。实际上，这个类型并不常用，大家了解一下就可以了

## 变量的命名

每个变量都必须有自己独一无二的名字，但是也要遵循以下规范。

* 硬性规则：
变量名由字母（广义的Unicode字符，不包括特殊字符）、数字和下划线构成，数字不能开头。
大小写敏感（大写的a和小写的A是两个不同的变量）。
不要跟关键字（有特殊含义的单词，后面会讲到）和系统保留字（如函数、模块等的名字）冲突。

* PEP 8要求：
用小写字母拼写，多个单词用下划线连接。
受保护的实例属性用单个下划线开头（后面会讲到）。
私有的实例属性用两个下划线开头（后面会讲到）。

作为一个专业的程序员，给变量（事实上应该是所有的标识符）命名时做到见名知意也是非常重要的
