Title         : Python的发展&编程语言基础
Author        : xxlucas
Logo          : True

[TITLE]

# Python的历史 


1. Python，这一编程语言最原始构想提出于上个世纪80年代末。
2. 在1989年圣诞节：Guido von Rossum开始写Python语言的编译器，
3. 1991年2月：第一个Python编译器（同时也是解释器）诞生，它是用C语言实现的（后面），可以调用C语言的库函数。在最早的版本中，Python已经提供了对“类”，“函数”，“异常处理”等构造块的支持，还有对列表、字典等核心数据类型，同时支持以模块为基础来构造应用程序。
4. 1994年1月：Python 1.0正式发布。
5. 2000年10月16日：Python 2.0发布，增加了完整的垃圾回收，提供了对Unicode的支持。与此同时，Python的整个开发过程更加透明，社区对开发进度的影响逐渐扩大，生态圈开始慢慢形成。
6. 2008年12月3日：Python 3.0发布，它并不完全兼容之前的Python代码，不过因为目前还有不少公司在项目和运维中使用Python 2.x版本，所以Python 3.x的很多新特性后来也被移植到Python 2.6/2.7版本中。
目前我们使用的Python 3.8.x的版本是在2019年发布的，Python的版本号分为三段，形如A.B.C。
其中A表示大版本号，一般当整体重写，或出现不向后兼容的改变时，增加A；B表示功能更新，出现新功能时增加B；C表示小的改动（例如：修复了某个Bug），只要有修改就增加C。如果对Python的历史感兴趣，可以阅读名为《Python简史》的网络文章。


现在比较活跃的编程语言大概有50种，但流行的编程语言也就那么20来种。如果你听说过TIOBE排行榜，你就能知道编程语言的大致流行程度。这是最近10年最常用的10种编程语言的变化图：


![tiobe]

[tiobe]: images/tiobe.PNG "tiobe" { width:auto; max-width:90% }


# Python是什么？

Python是一种计算机程序设计语言。
在计算机世界中，有很多的编程语言，可能你已经听过一两种，比如非常难学的C语言，或者拖拽图形就可编程的Arduino。

那Python是一种什么语言？

首先，我们普及一下编程语言的基础知识。
用任何编程语言来开发程序，都是为了让计算机干活，就好比打开浏览器输入网址就能访问网页，打开特定的网页，比如优酷，就可以看电影。
或者，最简单的下载一首付费歌曲，打开word编写文档等等。
而计算机里有个“小”部件名叫CPU，计算机都靠它来干活。然而，CPU只认识数字，而且只有两种(0,1)，
所以，尽管各编程语言不一样，而且有可能差别极大，但都得“翻译”成机器能懂的指令————也就是数字。所以，对同一任务，不同编程语言，有着不同的实现方式。

比如，完成同一个任务，C语言要写1000行代码，而Python可能只要20行。

所以仅以此角度，Python是一门相当高级的编程语言。

可能在这里，你可能有疑问？是否完成任务所需的代码量越少越好呢？答案，是的，但是，代码量少是有代价的。

代码少的代价是运行速度慢，C程序运行1秒钟，而Python程序可能就需要100秒。差距大概是100倍。

那是不是越低级的程序越难学，越高级的程序越简单？
表面上来说，是的，但是，在非常高的抽象计算中，高级的Python程序设计也是非常难学的，所以，高级程序语言不等于简单。

# Python的优缺点

Python的优点很多，简单的可以总结为以下几点。


* 简单明了，学习曲线低，比很多编程语言都容易上手。
* 开放源代码，拥有强大的社区和生态圈，尤其是在数据分析和机器学习领域。
* 代码规范程度高，可读性强，非常适合新手学习。

Python的缺点主要集中在以下几点。

* 执行效率低，对执行效率要求高的部分可以由其他语言（如：C、C++）编写。
* 代码无法加密，而代码无法加密会引发什么样的后果(可以讨论一下)。
* 生态繁荣的另一面，就是过于全面而导致深度不足。

# Python可以做什么

Python可以完成许多日常的任务，比如说，定时自动跟新歌单，画图来展示集合或者空间函数等等。

总之就是能干很多很多事啦。

Python当然也有不能干的事情，比如写操作系统，这个只能用C语言写；
写3D游戏，最好用C或C++。

# 优缺点

最后再回到优缺点，上面我们说运行速度慢是Python的主要缺点之一，具体原因是因为Python是解释型语言，
你的代码在执行时会一行一行地翻译成CPU能理解的机器码，
这个翻译过程非常耗时，所以很慢。
而C程序是运行前直接编译成CPU能执行的机器码，所以非常快。

但是，我们真的能感觉出来程序运行速度的差异么？
大量的应用程序不需要这么快的运行速度，因为用户根本感觉不出来。
例如开发一个在线听歌的网络应用程序，C程序的运行时间需要0.001秒，
而Python程序的运行时间需要0.1秒，慢了100倍，但由于网络更慢，需要等待1秒，你想，用户能感觉到1.001秒和1.1秒的区别吗？

_TODO Need an example close to life_

``` javascript
这就好比F1赛车和普通的出租车在北京三环路上行驶的道理一样，
虽然F1赛车理论时速高达400公里，但由于三环路堵车的时速只有20公里，因此，作为乘客，你感觉的时速永远是20公里。
```

# Python的安装

Windows环境
可以在Python官方网站下载到Python的Windows安装程序（exe文件），需要注意的是如果在Windows 7环境下安装Python 3.x，需要先安装Service Pack 1补丁包（可以通过一些工具软件自动安装系统补丁的功能来安装），安装过程建议勾选“Add Python 3.x to PATH”（将Python 3.x添加到PATH环境变量）并选择自定义安装，在设置“Optional Features”界面最好将“pip”、“tcl/tk”、“Python test suite”等项全部勾选上。强烈建议选择自定义的安装路径并保证路径中没有中文。安装完成会看到“Setup was successful”的提示。如果稍后运行Python程序时，出现因为缺失一些动态链接库文件而导致Python解释器无法工作的问题，可以按照下面的方法加以解决。

如果系统显示api-ms-win-crt*.dll文件缺失，可以参照《api-ms-win-crt*.dll缺失原因分析和解决方法》一文讲解的方法进行处理或者直接在微软官网下载Visual C++ Redistributable for Visual Studio 2015文件进行修复；如果是因为更新Windows的DirectX之后导致某些动态链接库文件缺失问题，可以下载一个DirectX修复工具进行修复。

# 运行Python程序

同时按下**_win+R_**并在弹出的窗口中输入_**powershell**_打开Windows Terminal,然后输入_**python**_进入python解释器，
然后键入如下代码：

``` python
import this
```
你将会在屏幕上看到Tim Peters所述的《Python的禅之道》。其中所述内容，在我们以后的编程实践当中都会用到。

``` python
Python之禅 by Tim Peters

优美胜于丑陋（Python 以编写优美的代码为目标）
明了胜于晦涩（优美的代码应当是明了的，命名规范，风格相似）
简洁胜于复杂（优美的代码应当是简洁的，不要有复杂的内部实现）
复杂胜于凌乱（如果复杂不可避免，那代码间也不能有难懂的关系，要保持接口简洁）
扁平胜于嵌套（优美的代码应当是扁平的，不能有太多的嵌套）
间隔胜于紧凑（优美的代码有适当的间隔，不要奢望一行代码解决问题）
可读性很重要（优美的代码是可读的）
即便假借特例的实用性之名，也不可违背这些规则（这些规则至高无上）
不要包容所有错误，除非你确定需要这样做（精准地捕获异常，不写 except:pass 风格的代码）
当存在多种可能，不要尝试去猜测
而是尽量找一种，最好是唯一一种明显的解决方案（如果不确定，就用穷举法）
虽然这并不容易，因为你不是 Python 之父（这里的 Dutch 是指 Guido ）
做也许好过不做，但不假思索就动手还不如不做（动手之前要细思量）
如果你无法向人描述你的方案，那肯定不是一个好方案；反之亦然（方案测评标准）
命名空间是一种绝妙的理念，我们应当多加利用（倡导与号召）
```

